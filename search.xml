<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>两数之和--梦开始的地方</title>
    <url>/2023/04/23/LeetCode/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C--%E6%A2%A6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%9C%B0%E6%96%B9/</url>
    <content><![CDATA[<img style = "width:400px" src = "https://beijing-syf.oss-cn-beijing.aliyuncs.com/notebook/leetcode.jpg">

<span id="more"></span>

<h1 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h1><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">解释：因为 nums[<span class="number">0</span>] + nums[<span class="number">1</span>] == <span class="number">9</span> ，返回 [<span class="number">0</span>, <span class="number">1</span>] 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>], target = <span class="number">6</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">3</span>], target = <span class="number">6</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 104</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>-109 &lt;= target &lt;= 109</code></li>
<li><strong>只会存在一个有效答案</strong></li>
</ul>
<h1 id="2-解析"><a href="#2-解析" class="headerlink" title="2.解析"></a>2.解析</h1><h2 id="1-暴力求解"><a href="#1-暴力求解" class="headerlink" title="1) 暴力求解"></a>1) 暴力求解</h2><p>两层for循环一套，直接秒,时间复杂度N²</p>
<blockquote>
<p>Java代码实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] towSum(<span class="type">int</span>[] nums,<span class="type">int</span> target)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;nums.length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;nums[i],nums[j]&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-双指针"><a href="#2-双指针" class="headerlink" title="2) 双指针"></a>2) 双指针</h2><blockquote>
<p>Java代码实现</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>双指针</tag>
        <tag>手撕算法题</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的排序算法--快速排序</title>
    <url>/2023/04/25/LeetCode/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<img style= "width:400px" src= "https://beijing-syf.oss-cn-beijing.aliyuncs.com/notebook/QuickSort.jpg">

<span id="more"></span>

<h1 id="1-Java实现"><a href="#1-Java实现" class="headerlink" title="1.Java实现"></a>1.Java实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> partition(arr, left, right);</span><br><span class="line">            quickSort(arr, left, pivot - <span class="number">1</span>);</span><br><span class="line">            quickSort(arr, pivot + <span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[right];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> left; j &lt; right; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; pivot) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                swap(arr, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, i + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-golang实现"><a href="#2-golang实现" class="headerlink" title="2.golang实现"></a>2.golang实现</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quickSort</span><span class="params">(arr []<span class="type">int</span>, left, right <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> left &lt; right &#123;</span><br><span class="line">        pivot := partition(arr, left, right)</span><br><span class="line">        quickSort(arr, left, pivot<span class="number">-1</span>)</span><br><span class="line">        quickSort(arr, pivot+<span class="number">1</span>, right)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">partition</span><span class="params">(arr []<span class="type">int</span>, left, right <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    pivot := arr[right]</span><br><span class="line">    i := left - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j := left; j &lt; right; j++ &#123;</span><br><span class="line">        <span class="keyword">if</span> arr[j] &lt; pivot &#123;</span><br><span class="line">            i++</span><br><span class="line">            arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i+<span class="number">1</span>], arr[right] = arr[right], arr[i+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>手撕算法题</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>按身高排序</title>
    <url>/2023/04/25/LeetCode/%E6%8C%89%E8%BA%AB%E9%AB%98%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<img style = "width:400px" src = "https://beijing-syf.oss-cn-beijing.aliyuncs.com/notebook/leetcode.jpg">

<span id="more"></span>

<h1 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h1><p>给你一个字符串数组 <code>names</code> ，和一个由 <strong>互不相同</strong> 的正整数组成的数组 <code>heights</code> 。两个数组的长度均为 <code>n</code> 。</p>
<p>对于每个下标 <code>i</code>，<code>names[i]</code> 和 <code>heights[i]</code> 表示第 <code>i</code> 个人的名字和身高。</p>
<p>请按身高 <strong>降序</strong> 顺序返回对应的名字数组 <code>names</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：names = [&quot;Mary&quot;,&quot;John&quot;,&quot;Emma&quot;], heights = [180,165,170]</span><br><span class="line">输出：[&quot;Mary&quot;,&quot;Emma&quot;,&quot;John&quot;]</span><br><span class="line">解释：Mary 最高，接着是 Emma 和 John 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：names = [&quot;Alice&quot;,&quot;Bob&quot;,&quot;Bob&quot;], heights = [155,185,150]</span><br><span class="line">输出：[&quot;Bob&quot;,&quot;Alice&quot;,&quot;Bob&quot;]</span><br><span class="line">解释：第一个 Bob 最高，然后是 Alice 和第二个 Bob 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>n == names.length == heights.length</code></li>
<li><code>1 &lt;= n &lt;= 103</code></li>
<li><code>1 &lt;= names[i].length &lt;= 20</code></li>
<li><code>1 &lt;= heights[i] &lt;= 105</code></li>
<li><code>names[i]</code> 由大小写英文字母组成</li>
<li><code>heights</code> 中的所有值互不相同</li>
</ul>
<h1 id="2-题解"><a href="#2-题解" class="headerlink" title="2.题解"></a>2.题解</h1><p>Java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>双指针</tag>
        <tag>手撕算法题</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/05/20/MySQL/MySQL%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/05/20/Spring/Spring%20MVC/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/05/20/Spring/Spring%20%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/05/20/MySQL/SQL%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/05/20/MySQL/MySQL%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/05/20/Spring/Spring%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/06/06/%E5%89%8D%E7%AB%AF/h5+css3+%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%89%8D%E7%AB%AF--pink/1.H5/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Docker简单入门</title>
    <url>/2023/04/24/Docker/Docker%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<img style = "width:400px" src ="https://beijing-syf.oss-cn-beijing.aliyuncs.com/notebook/docker.jpg">

<span id="more"></span>

<h1 id="1-下载Docker"><a href="#1-下载Docker" class="headerlink" title="1.下载Docker"></a>1.下载Docker</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式版本控制工具--Git</title>
    <url>/2023/04/05/Git/%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7--Git/</url>
    <content><![CDATA[<img style="width:400px" src="https://beijing-syf.oss-cn-beijing.aliyuncs.com/notebook/git.jpg">

<span id="more"></span>

<h1 id="一、Git基操"><a href="#一、Git基操" class="headerlink" title="一、Git基操"></a>一、Git基操</h1><h2 id="1-拷贝命令"><a href="#1-拷贝命令" class="headerlink" title="1.拷贝命令"></a>1.拷贝命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [代码仓库url]</span><br></pre></td></tr></table></figure>

<p>这种方式相当于是把项目所有的代码分支都拷贝下来，如果项目比较大，公司又是自己搭建的gitlab服务，恰好带宽又比较小，那估计得下半天。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [分支名] [代码仓库url]</span><br></pre></td></tr></table></figure>

<p>这种方式下载的是指定分支的代码，其他分支，不归你负责可以不用下载，这样短平快，减少coding的技能前摇。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git分支操作</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM内存模型</title>
    <url>/2023/06/08/jvm/jvm%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<img style= "width:400px" src="http://beijing-syf.oss-cn-beijing.aliyuncs.com/notebook/JVM1.png">

<span id="more"></span>

<img style="width:800px" src = "http://beijing-syf.oss-cn-beijing.aliyuncs.com/notebook/jvm.png">



<pre class="mermaid">graph LR;
JVM-->堆
JVM-->栈
JVM-->方法区
JVM-->程序计数器

堆-->新生代
堆-->老年代

新生代-->Eden
新生代-->from
新生代-->to

方法区-->常量池
方法区-->被共享的线程区域</pre>

<h2 id="1-JVM中存储类型"><a href="#1-JVM中存储类型" class="headerlink" title="1.JVM中存储类型"></a>1.JVM中存储类型</h2><p><strong>堆</strong>：存储的是对象本身</p>
<p><strong>栈</strong>：（1）存储对象的引用 （2）存储基本数据类型  （3） 方法调用时进栈，方法执行完退栈</p>
<p><strong>方法区：</strong> （1）常量池、静态区</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"> <span class="number">2</span> <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"> <span class="number">3</span> <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;Hel&quot;</span> + <span class="string">&quot;lo&quot;</span>;</span><br><span class="line"> <span class="number">4</span> <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;Hel&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;lo&quot;</span>);</span><br><span class="line"> <span class="number">5</span> <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"> <span class="number">6</span> <span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> s5.intern();</span><br><span class="line"> <span class="number">7</span> <span class="type">String</span> <span class="variable">s7</span> <span class="operator">=</span> <span class="string">&quot;H&quot;</span>;</span><br><span class="line"> <span class="number">8</span> <span class="type">String</span> <span class="variable">s8</span> <span class="operator">=</span> <span class="string">&quot;ello&quot;</span>;</span><br><span class="line"> <span class="number">9</span> <span class="type">String</span> <span class="variable">s9</span> <span class="operator">=</span> s7 + s8;</span><br><span class="line"><span class="number">10</span>           </span><br><span class="line"><span class="number">11</span> System.out.println(s1 == s2);  <span class="comment">// true</span></span><br><span class="line"><span class="number">12</span> System.out.println(s1 == s3);  <span class="comment">// true</span></span><br><span class="line"><span class="number">13</span> System.out.println(s1 == s4);  <span class="comment">// false</span></span><br><span class="line"><span class="number">14</span> System.out.println(s1 == s9);  <span class="comment">// false</span></span><br><span class="line"><span class="number">15</span> System.out.println(s4 == s5);  <span class="comment">// false</span></span><br><span class="line"><span class="number">16</span> System.out.println(s1 == s6);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JVM</category>
      </categories>
  </entry>
  <entry>
    <title>全网最火的流程引擎--flowable</title>
    <url>/2023/04/05/flowable/%E5%85%A8%E7%BD%91%E6%9C%80%E7%81%AB%E7%9A%84%E6%B5%81%E7%A8%8B%E5%BC%95%E6%93%8Eflowable/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>流程引擎</category>
      </categories>
      <tags>
        <tag>flowable</tag>
      </tags>
  </entry>
  <entry>
    <title>打开golang的大门</title>
    <url>/2023/04/23/golang/%E6%89%93%E5%BC%80golang%E7%9A%84%E5%A4%A7%E9%97%A8/</url>
    <content><![CDATA[<img style="width:400px" src="https://beijing-syf.oss-cn-beijing.aliyuncs.com/notebook/golang.jpg">

<span id="more"></span>

<h1 id="1-Go语言介绍"><a href="#1-Go语言介绍" class="headerlink" title="1.Go语言介绍"></a>1.Go语言介绍</h1><p>golang语言是一个<strong>编译型语言</strong>（静态语言），2006年开始，2009年开源，国内发展十分迅速。语法简单、后发语言集各种语言的优势、</p>
<p>执行性能高、并发编程非常高效、编译速度快。能做什么，1.web开发 2.容器虚拟化 3.中间件 4.区块链 5.微服务</p>
<h1 id="2-Go的环境变量"><a href="#2-Go的环境变量" class="headerlink" title="2.Go的环境变量"></a>2.Go的环境变量</h1><ul>
<li><p>GOROOT：Go 语言安装根目录的路径，也就是 GO 语言的安装路径。</p>
</li>
<li><p>GOPATH：若干工作区目录的路径。是我们自己定义的工作空间。</p>
<pre class="mermaid">  graph LR;

源码文件-->命令源码文件
源码文件-->库源码文件
源码文件-->测试源码文件

命令源码文件-->独立程序入口
命令源码文件-->属于main包,包含无参数无结果的main函数
命令源码文件-->main函数执行结果意味着当前程序运行结果
命令源码文件-->同一代码包中不要放多个命令源码文件
命令源码文件-->命令源码文件不要和库源码文件放在同一个代码包中
命令源码文件-->构建
命令源码文件-->安装
构建-->A(构建后生成可执行文件可执行文件为executable file)
A-->windows一般生成.exe文件
A-->Linux一般没有扩展名
构建-->生成位置在命令执行目录
安装-->安装后生成可执行文件</pre>


</li>
<li><p>GOBIN：GO 程序生成的可执行文件（executable file）的路径。</p>
</li>
</ul>
<h1 id="3-Go语言中的变量和常量"><a href="#3-Go语言中的变量和常量" class="headerlink" title="3.Go语言中的变量和常量"></a>3.Go语言中的变量和常量</h1><h2 id="3-1变量"><a href="#3-1变量" class="headerlink" title="3.1变量"></a>3.1变量</h2><ul>
<li>Go中的变量类型：</li>
<li>Go中定义变量规范：<ul>
<li>变量必须先定义后使用</li>
<li>变量必须有类型</li>
<li>类型定下来之后不能改变</li>
<li>go语言中，局部变量定义了不使用是不可以的，编译的时候会报错，全局变量可以不使用</li>
<li>变量名不能冲突</li>
<li>变量是有默认值的</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//批量定义</span></span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">    name = <span class="string">&quot;hello&quot;</span></span><br><span class="line">    age = <span class="number">10</span></span><br><span class="line">    ok <span class="type">bool</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//第一种</span></span><br><span class="line">    <span class="keyword">var</span> name （<span class="type">string</span>）= <span class="string">&quot;1&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第二种</span></span><br><span class="line">    age:=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//多变量定义</span></span><br><span class="line">    <span class="keyword">var</span> user1,user2,user3 = <span class="string">&quot;boby1&quot;</span>,<span class="number">1</span>,<span class="string">&quot;boby3&quot;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>全局变量和局部变量</p>
<ul>
<li>全局变量和局部变量名字可以相同</li>
<li>相同名字的全局变量和局部变量，变量类型可以不同</li>
<li>在函数内使用时，优先级是：局部变量&gt;全局变量</li>
<li>简介变量定义方法不能用于全局变量</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;我是全局变量&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> name = <span class="number">1</span></span><br><span class="line">	fmt.Print(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//API server listening at: 127.0.0.1:57006</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//调试器 已完成，退出代码为 0</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-2常量的定义"><a href="#3-2常量的定义" class="headerlink" title="3.2常量的定义"></a>3.2常量的定义</h2><p>常量是定义的时候就指定的值，不能修改。加const关键字就可以了</p>
<ul>
<li>常量要全部大写，如果是不同的单词，中间要加下划线</li>
<li>常量类型只可以定义bool、数值（整数、浮点数和复数） 和 字符串</li>
<li>不使用的常量，在编译的时候也不会报错</li>
<li>显示指定类型的时候，必须保证常量左右值一致</li>
<li>批量赋值的时候，如果未指定常量类型和数值，会沿用上一个常量的值</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> PI <span class="type">float32</span> = <span class="number">3.1415926</span>  <span class="comment">//显示定义</span></span><br><span class="line">    <span class="keyword">const</span> PI  = <span class="number">3.1415926</span>  <span class="comment">//隐示定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//研究常量的批量赋值时，没有手动赋值的常量的类型以及初始值</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span>(</span><br><span class="line">        x <span class="type">int</span> = <span class="number">16</span></span><br><span class="line">        y</span><br><span class="line">        s = <span class="string">&quot;abc&quot;</span></span><br><span class="line">        z</span><br><span class="line">    )</span><br><span class="line">    fmt.Println(x,y,s,z)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="comment">//16 16 abc abc</span></span><br><span class="line"><span class="comment">//进程 已完成，退出代码为 0</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-iota"><a href="#3-3-iota" class="headerlink" title="3.3 iota"></a>3.3 iota</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		ERR1 = <span class="literal">iota</span></span><br><span class="line">		ERR2</span><br><span class="line">		ERR3 = <span class="string">&quot;haha&quot;</span></span><br><span class="line">		ERR4</span><br><span class="line">		ERR5 = <span class="literal">iota</span></span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		ERR6 = <span class="literal">iota</span></span><br><span class="line">	)</span><br><span class="line">	fmt.Println(ERR1, ERR2, ERR3, ERR4, ERR5, ERR6)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//API server listening at: 127.0.0.1:60084</span></span><br><span class="line"><span class="comment">//0 1 haha haha 4 0</span></span><br></pre></td></tr></table></figure>

<p>iota规则怪谈</p>
<ul>
<li>每次 const 出现时，都会让 iota 初始化为0.</li>
<li>自增长常量经常包含一个自定义枚举类型，允许你依靠编译器完成自增设置。</li>
</ul>
<h2 id="3-4匿名变量"><a href="#3-4匿名变量" class="headerlink" title="3.4匿名变量"></a>3.4匿名变量</h2><p>匿名变量就是一个下划线</p>
<p>匿名变量规则怪谈</p>
<ul>
<li>匿名变量 不能在后续的编码中使用的</li>
<li>不能将匿名变量对其他变量进行赋值或者运算</li>
<li>任何赋值给 匿名变量的值 都将被抛弃</li>
</ul>
<h1 id="4-Go中的基本数据类型"><a href="#4-Go中的基本数据类型" class="headerlink" title="4.Go中的基本数据类型"></a>4.Go中的基本数据类型</h1><pre class="mermaid">graph LR;
基本数据类型-->bool

基本数据类型-->数值类型
    数值类型-->zslx
    数值类型-->浮点类型
    数值类型-->复数
    数值类型-->byte字节
    数值类型-->rune类型

基本数据类型-->字符和string

zslx(整数类型)-->有符号
zslx-->无符号

有符号-->int8 
有符号-->int16
有符号-->int32=rune
有符号-->int64
无符号-->uint8=byte
无符号-->unit16
无符号-->unit32 
无符号-->unit64

浮点类型-->float32
浮点类型-->float64</pre>

<ol>
<li>按长度：int8、int16、int32、int64</li>
<li>无符号整型：uint8、uint16、uint32、uint64</li>
</ol>
<table>
<thead>
<tr>
<th align="center"><strong>类型</strong></th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">uint8</td>
<td align="left">无符号8位整型（0到255）</td>
</tr>
<tr>
<td align="center">uint16</td>
<td align="left">无符号16位整型（0到65535）</td>
</tr>
<tr>
<td align="center">uint32</td>
<td align="left">无符号32位整型（0到4294967295）</td>
</tr>
<tr>
<td align="center">uint64</td>
<td align="left">无符号64位整型（0到18446744073709551615）</td>
</tr>
<tr>
<td align="center">int8</td>
<td align="left">有符号8位整型（-128到127）</td>
</tr>
<tr>
<td align="center">int16</td>
<td align="left">有符号 16位整型 (-32768 到 32767)</td>
</tr>
<tr>
<td align="center">int32</td>
<td align="left">有符号 32位整型 (-2147483648 到 2147483647)</td>
</tr>
<tr>
<td align="center">int64</td>
<td align="left">有符号 64位整型 (-9223372036854775808 到 9223372036854775807)</td>
</tr>
</tbody></table>
<p><strong>特殊整型</strong></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>uint</td>
<td>32位操作系统上就是<code>uint32</code>，64位操作系统上就是<code>uint64</code></td>
</tr>
<tr>
<td>int</td>
<td>32位操作系统上就是<code>int32</code>，64位操作系统上就是<code>int64</code></td>
</tr>
<tr>
<td>uintptr</td>
<td>无符号整型，用于存放一个指针</td>
</tr>
</tbody></table>
<h2 id="4-1数值、浮点和字符类型"><a href="#4-1数值、浮点和字符类型" class="headerlink" title="4.1数值、浮点和字符类型"></a>4.1数值、浮点和字符类型</h2>]]></content>
      <categories>
        <category>golang</category>
      </categories>
  </entry>
  <entry>
    <title>node版本管理利器--nvm的安装使用</title>
    <url>/2023/04/20/nvm/nvm%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<img style="width:400px" src= "https://beijing-syf.oss-cn-beijing.aliyuncs.com/notebook/nvm.jpg">

<span id="more"></span>

<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><h2 id="1-下载安装包-nvm文档手册-nvm是一个nodejs版本管理工具-nvm中文网-uihtm-com"><a href="#1-下载安装包-nvm文档手册-nvm是一个nodejs版本管理工具-nvm中文网-uihtm-com" class="headerlink" title="1.[下载安装包](nvm文档手册 - nvm是一个nodejs版本管理工具 - nvm中文网 (uihtm.com))"></a>1.[下载安装包](<a href="https://nvm.uihtm.com/">nvm文档手册 - nvm是一个nodejs版本管理工具 - nvm中文网 (uihtm.com)</a>)</h2><p>​	在官网上针对您的系统进行相应的下载。下载完之后安装，都是傻瓜式的操作，这不多赘述。</p>
<p>如果您有幸生活在“墙国”，需要配置淘宝镜像，才能正常使用该利器。</p>
<h2 id="2-nvm淘宝镜像设置"><a href="#2-nvm淘宝镜像设置" class="headerlink" title="2.nvm淘宝镜像设置"></a>2.nvm淘宝镜像设置</h2><p>使用命令，查看配置文件所在目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm root</span><br></pre></td></tr></table></figure>

<p>如果不出意外，应该会显示nvm的安装目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Current Root: C:\Users\winford\AppData\Roaming\nvm</span><br></pre></td></tr></table></figure>

<p>copy一下，cd 进入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Mode                 LastWriteTime         Length Name</span><br><span class="line">----                 -------------         ------ ----</span><br><span class="line">d-----         2023/4/20     21:11                v16.0.0</span><br><span class="line">d-----         2023/4/20     21:03                v16.14.1</span><br><span class="line">-a----         2015/9/30     14:09             86 elevate.cmd</span><br><span class="line">-a----         2015/9/30     14:09            348 elevate.vbs</span><br><span class="line">-a----         2015/9/30     14:09            491 install.cmd</span><br><span class="line">-a----         2015/9/30     14:09          15086 nodejs.ico</span><br><span class="line">-a----          2018/8/8      0:46        6150648 nvm.exe</span><br><span class="line">-a----         2023/4/20     21:02            175 settings.txt</span><br><span class="line">-a----         2023/4/20     20:57          14051 unins000.dat</span><br><span class="line">-a----         2023/4/20     20:56         737272 unins000.exe</span><br><span class="line">-a----         2023/4/20     20:57          11401 unins000.msg</span><br></pre></td></tr></table></figure>

<p>大概是这样的目录结构</p>
<p>打开setting.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root: C:\Users\winford\AppData\Roaming\nvm</span><br><span class="line">path: C:\Program Files\nodejs</span><br><span class="line"></span><br><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>

<p>加上下面两行代码就好了</p>
<h1 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h1><h2 id="1-查看可下载的版本"><a href="#1-查看可下载的版本" class="headerlink" title="1.查看可下载的版本"></a>1.查看可下载的版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\winford\AppData\Roaming\nvm&gt; nvm list available</span><br><span class="line"></span><br><span class="line">|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE |</span><br><span class="line">|--------------|--------------|--------------|--------------|</span><br><span class="line">|    20.0.0    |   18.16.0    |   0.12.18    |   0.11.16    |</span><br><span class="line">|    19.9.0    |   18.15.0    |   0.12.17    |   0.11.15    |</span><br><span class="line">|    19.8.1    |   18.14.2    |   0.12.16    |   0.11.14    |</span><br><span class="line">|    19.8.0    |   18.14.1    |   0.12.15    |   0.11.13    |</span><br><span class="line">|    19.7.0    |   18.14.0    |   0.12.14    |   0.11.12    |</span><br><span class="line">|    19.6.1    |   18.13.0    |   0.12.13    |   0.11.11    |</span><br><span class="line">|    19.6.0    |   18.12.1    |   0.12.12    |   0.11.10    |</span><br><span class="line">|    19.5.0    |   18.12.0    |   0.12.11    |    0.11.9    |</span><br><span class="line">|    19.4.0    |   16.20.0    |   0.12.10    |    0.11.8    |</span><br><span class="line">|    19.3.0    |   16.19.1    |    0.12.9    |    0.11.7    |</span><br><span class="line">|    19.2.0    |   16.19.0    |    0.12.8    |    0.11.6    |</span><br><span class="line">|    19.1.0    |   16.18.1    |    0.12.7    |    0.11.5    |</span><br><span class="line">|    19.0.1    |   16.18.0    |    0.12.6    |    0.11.4    |</span><br><span class="line">|    19.0.0    |   16.17.1    |    0.12.5    |    0.11.3    |</span><br><span class="line">|   18.11.0    |   16.17.0    |    0.12.4    |    0.11.2    |</span><br><span class="line">|   18.10.0    |   16.16.0    |    0.12.3    |    0.11.1    |</span><br><span class="line">|    18.9.1    |   16.15.1    |    0.12.2    |    0.11.0    |</span><br><span class="line">|    18.9.0    |   16.15.0    |    0.12.1    |    0.9.12    |</span><br><span class="line">|    18.8.0    |   16.14.2    |    0.12.0    |    0.9.11    |</span><br><span class="line">|    18.7.0    |   16.14.1    |   0.10.48    |    0.9.10    |</span><br><span class="line"></span><br><span class="line">This is a partial list. For a complete list, visit https://nodejs.org/download/release</span><br></pre></td></tr></table></figure>

<h2 id="2-下载并安装特定版本"><a href="#2-下载并安装特定版本" class="headerlink" title="2.下载并安装特定版本"></a>2.下载并安装特定版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install [版本号]</span><br></pre></td></tr></table></figure>

<h2 id="3-查看已下载的版本"><a href="#3-查看已下载的版本" class="headerlink" title="3.查看已下载的版本"></a>3.查看已下载的版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\winford\AppData\Roaming\nvm&gt; nvm list</span><br><span class="line"></span><br><span class="line">    16.14.1</span><br><span class="line">  * 16.0.0 (Currently using 64-bit executable)</span><br></pre></td></tr></table></figure>

<h2 id="4-使用已安装的版本"><a href="#4-使用已安装的版本" class="headerlink" title="4.使用已安装的版本"></a>4.使用已安装的版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use [已安装的版本号] ---需要管理员权限</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>nvm</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Kubernetes</title>
    <url>/2023/05/18/kubernetes/1.%E5%88%9D%E8%AF%86kubernetes/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><img style ="width:400px"  src = "http://beijing-syf.oss-cn-beijing.aliyuncs.com/notebook/k8s.jpg">

<span id="more"></span>

<h2 id="一、容器编排技术"><a href="#一、容器编排技术" class="headerlink" title="一、容器编排技术"></a>一、容器编排技术</h2><p>Docker是单个的容器，而kubernetes是管理这些容器的舵手。类似于docker-compose，虽然docker-compose和kubernates都是容器编排技术，但是docker-compose只是在单机上运行，而kubernetes可以在多台实例上运行。。当在物理服务器上安装一套传统的操作系统(Linux或Windows)时，操作系统会对服务器的物理资源进行抽象，并对进程进行调动，等等。当在云上安装Kubernetes时，它会对云上的资源进行抽象，并对多种云原生微服务应用进行调度。所以，kubernetes又被称之为云操作系统。</p>
<h2 id="二、Kubernetes架构"><a href="#二、Kubernetes架构" class="headerlink" title="二、Kubernetes架构"></a>二、Kubernetes架构</h2><p>主节点–是下命令的</p>
<p>工作节点–是办事的</p>
<p>主节点中：</p>
<p>kubectl是一个命令向主节点发送指令，主节点再向工作节点发送指令。</p>
<p> API Server 是一个枢纽，工作节点上线，下线都要向主节点进行注册，互联互通的数据都是由API server来管理的</p>
<p>Controller-manager 状态管理者，重分配，重平衡</p>
<p>scheduler 调度者 根据现有的资源进行分配</p>
<p>etcd将目前的状态信息和配置信息进行持久化管理</p>
<p>工作节点：</p>
<p>kubelet是接受命令的程序，并且上报目前的信息</p>
<p>容器运行时（docker之类）</p>
<p>Pod 作为k8s中，最小的处理单元，Pod本身也是一个容器</p>
<p>kube-proxy是网络代理</p>
<h2 id="三、Pod详细讲解"><a href="#三、Pod详细讲解" class="headerlink" title="三、Pod详细讲解"></a>三、Pod详细讲解</h2><p>​    Pod是kubernetes处理的最小单元，一个Pod可以放一个容器（单容器Pod），但是一般都会放置多个容器（多容器Pod），好处是在一个Pod里面的容器可以共享一个IP地址。 </p>
<p>pause容器是每个Pod容器都存在的，</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>微信支付从入门到入土——简单支付</title>
    <url>/2023/04/09/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F(%E4%B8%80)/</url>
    <content><![CDATA[<img style="width:400px" src ="https://beijing-syf.oss-cn-beijing.aliyuncs.com/notebook/wxpay.jpg">

<span id="more"></span>

<h3 id="一、流程总览"><a href="#一、流程总览" class="headerlink" title="一、流程总览"></a>一、流程总览</h3><img width = "800" height = "500" src = "https://beijing-syf.oss-cn-beijing.aliyuncs.com/notebook/20230406131413.png"/>

<h3 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h3><h3 id="三、基于微信SDK的具体业务实现"><a href="#三、基于微信SDK的具体业务实现" class="headerlink" title="三、基于微信SDK的具体业务实现"></a>三、基于微信SDK的具体业务实现</h3><h5 id="1-首先要引入微信支付sdk的maven依赖，该sdk基于微信支付V3接口"><a href="#1-首先要引入微信支付sdk的maven依赖，该sdk基于微信支付V3接口" class="headerlink" title="1.首先要引入微信支付sdk的maven依赖，该sdk基于微信支付V3接口"></a>1.首先要引入微信支付sdk的maven依赖，该sdk基于微信支付V3接口</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.wechatpay-apiv3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wechatpay-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-基于构建微信支付单例"><a href="#2-基于构建微信支付单例" class="headerlink" title="2.基于构建微信支付单例"></a>2.基于构建微信支付单例</h5><p>微信不允许重复构建，只能采用单例的形式。否则会报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WechatPayConfig</span> &#123;</span><br><span class="line">    <span class="comment">/** 商户号 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">merchantId</span> <span class="operator">=</span> <span class="string">&quot;XXXXXXX&quot;</span>;</span><br><span class="line">    <span class="comment">/** 商户API私钥路径 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">privateKeyPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\XXXXX\\apiclient_key.pem&quot;</span>;</span><br><span class="line">    <span class="comment">/** 商户证书序列号 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">merchantSerialNumber</span> <span class="operator">=</span> <span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span>;</span><br><span class="line">    <span class="comment">/** 商户APIV3密钥 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">apiV3key</span> <span class="operator">=</span> <span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span>;</span><br><span class="line"><span class="comment">//先建造出微信通用的config的Bean，这个config需要用到两次</span></span><br><span class="line"><span class="comment">//第一次是生成prepayId</span></span><br><span class="line"><span class="comment">//第二次则是在微信回调服务器验签</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Config <span class="title function_">getConfig</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RSAAutoCertificateConfig</span>.Builder()</span><br><span class="line">                .merchantId(merchantId)</span><br><span class="line">                .privateKeyFromPath(privateKeyPath)</span><br><span class="line">                .merchantSerialNumber(merchantSerialNumber)</span><br><span class="line">                .apiV3Key(apiV3key)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//建造生成prepayId的bean，本文以小程序支付为例，其他方式支付方法类似</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JsapiService <span class="title function_">getJsapiService</span> <span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 构建service</span></span><br><span class="line">        <span class="type">JsapiService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsapiService</span>.Builder().config(config).build();</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不过博主建议用微信sdk提供的另一个bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JsapiServiceExtension <span class="title function_">getJsapiServiceExtension</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">JsapiServiceExtension</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsapiServiceExtension</span>.Builder().config(config).build();</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//这两种方法区别是第二种更强大，不仅生成了prepayId还生成了前端需要的其他参数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-实现具体业务–生成prepayId"><a href="#3-实现具体业务–生成prepayId" class="headerlink" title="3.实现具体业务–生成prepayId"></a>3.实现具体业务–生成prepayId</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">openId</span> <span class="operator">=</span> XXXXXXXX  <span class="comment">//小程序下唯一uid</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">price</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;10&quot;</span>); <span class="comment">//声明价格</span></span><br><span class="line"><span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> sysCode.getName()+<span class="string">&quot;-&quot;</span>+price+<span class="string">&quot;元&quot;</span>; <span class="comment">//商品描述</span></span><br><span class="line"><span class="type">PrepayRequest</span> <span class="variable">prepayRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrepayRequest</span>();    </span><br><span class="line">prepayRequest.setAppid(appId);</span><br><span class="line"><span class="type">Amount</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Amount</span>();</span><br><span class="line">amount.setCurrency(<span class="string">&quot;CNY&quot;</span>);</span><br><span class="line">amount.setTotal(price.intValue()*<span class="number">100</span>);  <span class="comment">//要把BigDecimal转成int，单位是分</span></span><br><span class="line">prepayRequest.setAmount(amount);</span><br><span class="line"></span><br><span class="line">prepayRequest.setMchid(merchantId);         </span><br><span class="line">prepayRequest.setOutTradeNo(IdWorker.getIdStr());     <span class="comment">//订单号</span></span><br><span class="line">prepayRequest.setDescription(description);</span><br><span class="line">prepayRequest.setNotifyUrl(notifyUrl);                <span class="comment">//用户支付成功后的回调地址</span></span><br><span class="line"><span class="type">Payer</span> <span class="variable">payer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Payer</span>();</span><br><span class="line">payer.setOpenid(openId);                  </span><br><span class="line">prepayRequest.setPayer(payer);</span><br><span class="line"></span><br><span class="line"><span class="type">PrepayWithRequestPaymentResponse</span> <span class="variable">response</span> <span class="operator">=</span> jsapiServiceExtension.prepayWithRequestPayment(prepayRequest);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RabbitResponse</span>(RabbitResponseEnums.SUCCESS,response);</span><br></pre></td></tr></table></figure>

<h5 id="4-回调处理–验签"><a href="#4-回调处理–验签" class="headerlink" title="4.回调处理–验签"></a>4.回调处理–验签</h5><p>（未完待续。。。）</p>
]]></content>
      <categories>
        <category>支付模块</category>
      </categories>
      <tags>
        <tag>微信支付</tag>
      </tags>
  </entry>
  <entry>
    <title>鸡尾酒--</title>
    <url>/2023/04/25/%E9%B8%A1%E5%B0%BE%E9%85%92/%E9%B8%A1%E5%B0%BE%E9%85%921/</url>
    <content><![CDATA[<img style= "width:400px" src= "https://beijing-syf.oss-cn-beijing.aliyuncs.com/notebook/jiu.jpg">

<span id="more"></span>

<h1 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h1><p>美国独立战争时期，一群军官涌入一家酒吧要喝酒。但是当时酒已经售完，老板娘急中生智，将所有的酒混合在一起，并随手拔了一根鸡毛作为装饰。没想到各种酒混合之后，口味极佳，军官连连称赞。从此，鸡尾酒的美名不胫而走。</p>
]]></content>
      <categories>
        <category>鸡尾酒</category>
      </categories>
      <tags>
        <tag>鸡尾酒</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发编程之JUC包</title>
    <url>/2023/05/20/Java/JUC/JUC/</url>
    <content><![CDATA[<img style="width:400px" src = "http://beijing-syf.oss-cn-beijing.aliyuncs.com/notebook/java.jpg">

<span id="more"></span>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JUC</tag>
        <tag>Java</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java虚拟机</title>
    <url>/2023/05/20/Java/JVM/JVM/</url>
    <content><![CDATA[<img style="width:400px" src = "http://beijing-syf.oss-cn-beijing.aliyuncs.com/notebook/java.jpg">

<span id="more"></span>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合</title>
    <url>/2023/05/19/Java/%E9%9B%86%E5%90%88/%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<img style="width:400px" src = "http://beijing-syf.oss-cn-beijing.aliyuncs.com/notebook/java.jpg">

<span id="more"></span>

<h1 id="1-脑图"><a href="#1-脑图" class="headerlink" title="1.脑图"></a>1.脑图</h1><pre class="mermaid">graph LR
    集合-->Collection
    集合-->Map
    
    Collection-->List
    Collection-->Set
    
    Map-->Hashtable
    Map-->HashMap
    Map-->TreeMap
    Map-->IdentityHashMap
    
    List-->Vector
    List-->ArrayList
    List-->LinkedList
    List-->CopyOnWriteArrayList
    
    Set-->HashSet
    Set-->TreeSet
    
    HashMap-->LinkedHashMap
    HashMap-->WeakHashMap
    Vector-->Stack 
    HashSet-->LinkedhashSet</pre>



<h1 id="2-List接口"><a href="#2-List接口" class="headerlink" title="2.List接口"></a>2.List接口</h1><h2 id="2-1-List的第一代集合类"><a href="#2-1-List的第一代集合类" class="headerlink" title="2.1 List的第一代集合类"></a>2.1 List的第一代集合类</h2><h5 id="Vector："><a href="#Vector：" class="headerlink" title="Vector："></a>Vector：</h5><ul>
<li>第一代集合类，线程安全，类似于是把ArrayList的所有public方法都加上synchronized锁</li>
</ul>
<h2 id="2-2-List的第二代集合类"><a href="#2-2-List的第二代集合类" class="headerlink" title="2.2 List的第二代集合类"></a>2.2 List的第二代集合类</h2><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList:"></a>ArrayList:</h5><ul>
<li>数据结构：底层使用数组实现，地址是连续的内存</li>
<li>特点：查询快，增删慢</li>
<li>线程不安全</li>
<li>重要参数：初始大小无参是0，调用add方法后是10，加载因子是1，默认扩容1.5</li>
</ul>
<h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList:"></a>LinkedList:</h5><ul>
<li>数据结构：底层是链表结构，地址是不连续的</li>
<li>特点：查询慢，增删快</li>
<li>线程不安全</li>
</ul>
<h2 id="2-3-List的第三代集合类"><a href="#2-3-List的第三代集合类" class="headerlink" title="2.3 List的第三代集合类"></a>2.3 List的第三代集合类</h2><h5 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList:"></a>CopyOnWriteArrayList:</h5><ul>
<li>是什么：CopyOnWrite容器即写时复制的容器。通俗的理解是<strong>当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。</strong></li>
<li>好处：我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器</li>
<li>应用场景：读多写少</li>
<li>实现原理：<strong>CopyOnWrite+Lock锁</strong></li>
<li>线程安全：CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。</li>
</ul>
<h2 id="2-4-八股文"><a href="#2-4-八股文" class="headerlink" title="2.4 八股文"></a>2.4 八股文</h2><ul>
<li><h5 id="问：ArrayList和Vector有何区别"><a href="#问：ArrayList和Vector有何区别" class="headerlink" title="问：ArrayList和Vector有何区别"></a>问：ArrayList和Vector有何区别</h5><p>答：</p>
<p>1.ArrayList有三个构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span><span class="comment">//构造一个具有指定初始容量的空列表。    </span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span>      <span class="comment">//默认构造一个初始容量为10的空列表。    </span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span><span class="comment">//构造一个包含指定 collection 的元素的列表</span></span><br></pre></td></tr></table></figure>

<p>Vector有四个构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">()</span><span class="comment">//使用指定的初始容量和等于0的容量增量构造一个空向量。    </span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity)</span><span class="comment">//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。    </span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(Collection&lt;? extends E&gt; c)</span><span class="comment">//构造一个包含指定 collection 中的元素的向量    </span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity,<span class="type">int</span> capacityIncrement)</span><span class="comment">//使用指定的初始容量和容量增量构造一个空的向量    </span></span><br></pre></td></tr></table></figure>

<p>2.Vector是线程安全的，线程安全的意思是多个线程访问同一代码，不会产生不确定性结果。而ArrayList不是。</p>
<p>3.执行效率，ArrayList的执行效率高于Vector，因为Vector在public方法上都加了Synchonized锁，所以执行效率会比较低。</p>
<p>4.Vector可以设置增长因子，而ArrayList的增长因子是固定的。</p>
</li>
<li><h5 id="问：ArrayList和LinkedList有啥区别"><a href="#问：ArrayList和LinkedList有啥区别" class="headerlink" title="问：ArrayList和LinkedList有啥区别"></a>问：ArrayList和LinkedList有啥区别</h5><p>答：1.底层数据结构不同：ArrayList是基于数组实现的，因为地址是连续的，一旦存储好了，查询速度是比较快的；而LinkedList是基于链表实现，这就意味着地址可以不是连续的，save和remove的效率比较高，而查询的效率相对比较低。</p>
</li>
<li><h5 id="问：ArrayList的扩容机制是怎么样的"><a href="#问：ArrayList的扩容机制是怎么样的" class="headerlink" title="问：ArrayList的扩容机制是怎么样的"></a>问：ArrayList的扩容机制是怎么样的</h5><p>1.使用无参构造ArrayList当时的长度为0，如果后面调用add（）方法，将会给数组分配的<strong>初始长度为10</strong>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要分配的最大数组大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ArrayList扩容的核心方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// oldCapacity为旧容量，newCapacity为新容量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="comment">//将oldCapacity 右移一位，其效果相当于oldCapacity /2，</span></span><br><span class="line">    <span class="comment">//我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">   <span class="comment">// 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) `hugeCapacity()` 方法来比较 minCapacity 和 MAX_ARRAY_SIZE，</span></span><br><span class="line">   <span class="comment">//如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`。</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2.<code>ensurExplicitCapacity</code> 判断是否需要进行扩容，</p>
<ul>
<li>当我们要 add 进第 1 个元素到 ArrayList 时，elementData.length 为 0 （因为还是一个空的 list），因为执行了 <code>ensureCapacityInternal()</code> 方法 ，所以 minCapacity 此时为 10。此时，<code>minCapacity - elementData.length &gt; 0</code>成立，所以会进入 <code>grow(minCapacity)</code> 方法。</li>
<li>当 add 第 2 个元素时，minCapacity 为 2，此时 e lementData.length(容量)在添加第一个元素后扩容成 10 了。此时，<code>minCapacity - elementData.length &gt; 0</code> 不成立，所以不会进入 （执行）<code>grow(minCapacity)</code> 方法。</li>
<li>添加第 3、4···到第 10 个元素时，依然不会执行 grow 方法，数组容量都为 10。</li>
</ul>
<p>直到添加第 11 个元素，minCapacity(为 11)比 elementData.length（为 10）要大。进入 grow 方法进行扩容。</p>
<p>3.<strong>int newCapacity &#x3D; oldCapacity + (oldCapacity &gt;&gt; 1),所以 ArrayList 每次扩容之后容量都会变为原来的 1.5 倍左右（oldCapacity 为偶数就是 1.5 倍，否则是 1.5 倍左右）！</strong>  奇偶不同，比如 ：10+10&#x2F;2 &#x3D; 15, 33+33&#x2F;2&#x3D;49。如果是奇数的话会丢掉小数.</p>
</li>
</ul>
<h1 id="3-Map接口"><a href="#3-Map接口" class="headerlink" title="3.Map接口"></a>3.Map接口</h1><h2 id="3-1-Map第一代集合类"><a href="#3-1-Map第一代集合类" class="headerlink" title="3.1 Map第一代集合类"></a>3.1 Map第一代集合类</h2><h5 id="HashTable："><a href="#HashTable：" class="headerlink" title="HashTable："></a>HashTable：</h5><ul>
<li>线程安全</li>
<li>实现原理类似HashMap把所有的public方法加同步锁synchronized</li>
</ul>
<h2 id="3-2-Map第二代集合类"><a href="#3-2-Map第二代集合类" class="headerlink" title="3.2 Map第二代集合类"></a>3.2 Map第二代集合类</h2><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap:"></a>HashMap:</h5><ul>
<li>线程不安全：<ul>
<li>单线程扩容会导致头尾颠倒</li>
<li>多线程扩容会形成链表环</li>
</ul>
</li>
<li>底层数据结构：1.7数组+Entry链表   1.8数组+链表（红黑树）</li>
<li>重要参数：初始容量，无参构造数组是16，如果是有参构造就是最接近传入参数的可以被平方根的数（2次幂数），加载因子是0.75，默认扩容到2倍</li>
</ul>
<h2 id="3-3-Map第三代集合类"><a href="#3-3-Map第三代集合类" class="headerlink" title="3.3 Map第三代集合类"></a>3.3 Map第三代集合类</h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java集合</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/06/06/%E5%89%8D%E7%AB%AF/h5+css3+%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%89%8D%E7%AB%AF--pink/2.CSS/</url>
    <content><![CDATA[<h1 id="1-CSS简介"><a href="#1-CSS简介" class="headerlink" title="1.CSS简介"></a>1.CSS简介</h1><h2 id="1-1CSS语法规范"><a href="#1-1CSS语法规范" class="headerlink" title="1.1CSS语法规范"></a>1.1CSS语法规范</h2><p>由选择器以及一条或者多条声明组成。</p>
]]></content>
  </entry>
</search>
